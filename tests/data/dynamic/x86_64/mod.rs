use byteorder::LittleEndian;
use elf_utils::Elf64;
use elf_utils::ElfArch;
use elf_utils::ElfABI;
use elf_utils::ElfHdrData;
use elf_utils::ElfKind;
use elf_utils::ElfTable;
use elf_utils::note::NoteData;
use elf_utils::dynamic::DynamicEntData;
use elf_utils::prog_hdr::ProgHdrData;
use elf_utils::prog_hdr::Segment;
use elf_utils::reloc::x86_64::X86_64Reloc;
use elf_utils::section_hdr::SectionHdrData;
use elf_utils::section_hdr::SectionPos;
use elf_utils::section_hdr::SymsStrs;
use elf_utils::symtab::SymBase;
use elf_utils::symtab::SymBind;
use elf_utils::symtab::SymData;
use elf_utils::symtab::SymKind;
use std::marker::PhantomData;

pub const PATH: &'static str = "tests/data/dynamic/x86_64/ld-elf.so.1";

const NUM_PROG_HDRS: usize = 10;

pub const PROG_HDR_CONTENTS: [ProgHdrData<Elf64, Segment<u64>,
                                          Segment<u64>, Segment<u64>>;
                          NUM_PROG_HDRS] = [
    ProgHdrData::ProgHdr { virt_addr: 0x40, phys_addr: 0x40,
                           content: Segment { offset: 0x40, size: 0x230 } },
    ProgHdrData::Load { virt_addr: 0, phys_addr: 0,
                        mem_size: 0x5424, align: 0x1000,
                        read: true, write: false, exec: false,
                        content: Segment { offset: 0, size: 0x5424 } },
    ProgHdrData::Load { virt_addr: 0x6430, phys_addr: 0x6430,
                        mem_size: 0x15c14, align: 0x1000,
                        read: true, write: false, exec: true,
                        content: Segment { offset: 0x5430, size: 0x15c14 } },
    ProgHdrData::Load { virt_addr: 0x1d048, phys_addr: 0x1d048,
                        mem_size: 0x688, align: 4096,
                        read: true, write: true, exec: false,
                        content: Segment { offset: 0x1b048, size: 0x688 } },
    ProgHdrData::Load { virt_addr: 0x1e6d0, phys_addr: 0x1e6d0,
                        mem_size: 0xeb0, align: 4096,
                        read: true, write: true, exec: false,
                        content: Segment { offset: 0x1b6d0, size: 0xb0 } },
    ProgHdrData::Dynamic { virt_addr: 0x1d508, phys_addr: 0x1d508,
                           content: Segment { offset: 0x1b508, size: 0x110 } },
    ProgHdrData::Unknown { tag: 0x6474e552, flags: 4, offset: 0x1b048,
                           file_size: 0x688, mem_size: 0x688,
                           phys_addr: 0x1d048, virt_addr: 0x1d048, align: 1 },
    ProgHdrData::Unknown { tag: 0x6474e550, flags: 4, offset: 0x49dc,
                           file_size: 0x224, mem_size: 0x224,
                           phys_addr: 0x49dc, virt_addr: 0x49dc, align: 4 },
    ProgHdrData::Unknown { tag: 0x6474e551, flags: 6, offset: 0,
                           file_size: 0, mem_size: 0,
                           phys_addr: 0, virt_addr: 0, align: 0 },
    ProgHdrData::Note { virt_addr: 0x270, phys_addr: 0x270,
                        content: Segment { offset: 0x270, size: 0x18 } },
];

const NUM_SECTION_HDRS: usize = 22;

pub const SECTION_HDR_CONTENTS_BARE: [SectionHdrData<Elf64, u32, u32, u32, u32,
                                                     SectionPos<u64>,
                                                     SectionPos<u64>,
                                                     SectionPos<u64>,
                                                     SectionPos<u64>,
                                                     SectionPos<u64>,
                                                     SectionPos<u64>,
                                                     SectionPos<u64>,
                                                     SectionPos<u64>>;
                                      NUM_SECTION_HDRS] = [
    SectionHdrData::Null,
    SectionHdrData::Note { name: 12, addr: 0x270, align: 4,
                           note: SectionPos { offset: 0x270, size: 0x18 },
                           alloc: true, write: false, exec: false },
    SectionHdrData::Dynsym { name: 22, addr: 0x288, align: 8,
                             syms: SectionPos { offset: 0x288, size: 0x270 },
                             strtab: 7, local_end: 1,
                             alloc: true, write: false, exec: false },
    SectionHdrData::Unknown { name: 30, tag: 0x6fffffff,
                              addr: 0x4f8, align: 2, offset: 0x4f8, size: 0x34,
                              ent_size: 2, link: 2, info: 0, flags: 0x2 },
    SectionHdrData::Unknown { name: 43, tag: 0x6ffffffd,
                              addr: 0x52c, align: 4, offset: 0x52c, size: 0xfc,
                              ent_size: 0, link: 7, info: 9, flags: 0x2 },
    SectionHdrData::Unknown { name: 58, tag: 0x6ffffff6, addr: 0x628,
                              align: 8, offset: 0x628, size: 0xcc, ent_size: 0,
                              link: 2, info: 0, flags: 0x2 },
    SectionHdrData::Hash { name: 68, addr: 0x6f4, align: 4,
                           hash: SectionPos { offset: 0x6f4, size: 0xd8 },
                           symtab: 2, alloc: true, write: false, exec: false },
    SectionHdrData::Strtab { name: 74, addr: 0x7cc, align: 1,
                             strs: SectionPos { offset: 0x7cc, size: 0x1c0 } },
    SectionHdrData::Rela { name: 82, addr: 0x990, align: 8,
                           relas: SectionPos { offset: 0x990, size: 0x11a0 },
                           symtab: 2, target: 0, alloc: true, write: false,
                           exec: false },
    SectionHdrData::ProgBits { name: 92, addr: 0x1b30, align: 16,
                               data: SectionPos { offset: 0x1b30,
                                                  size: 0x2eac },
                               alloc: true, write: false, exec: false },
    SectionHdrData::ProgBits { name: 100, addr: 0x49dc, align: 4,
                               data: SectionPos { offset: 0x49dc, size: 0x224 },
                               alloc: true, write: false, exec: false },
    SectionHdrData::ProgBits { name: 114, addr: 0x4c00, align: 8,
                               data: SectionPos { offset: 0x4c00, size: 0x824 },
                               alloc: true, write: false, exec: false },
    SectionHdrData::ProgBits { name: 124, addr: 0x6430, align: 16,
                               data: SectionPos { offset: 0x5430,
                                                  size: 0x15c14 },
                               alloc: true, write: false, exec: true },
    SectionHdrData::Unknown { name: 130, tag: 15, addr: 0x1d048,
                              align: 8, offset: 0x1b048, size: 8, ent_size: 0,
                              link: 0, info: 0, flags: 0x3 },
    SectionHdrData::ProgBits { name: 142, addr: 0x1d050, align: 16,
                               data: SectionPos { offset: 0x1b050,
                                                  size: 0x4b8 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::Dynamic { name: 155, addr: 0x1d508, align: 8,
                              strtab: 7, dynamic: SectionPos { offset: 0x1b508,
                                                               size: 0x110 },
                              alloc: true, write: true, exec: false },
    SectionHdrData::ProgBits { name: 164, addr: 0x1d618, align: 8,
                               data: SectionPos { offset: 0x1b618, size: 0xb8 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::ProgBits { name: 169, addr: 0x1e6d0, align: 8,
                               data: SectionPos { offset: 0x1b6d0, size: 0xb0 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::Nobits { name: 175, addr: 0x1e780, align: 16,
                             offset: 0x1b780, size: 0xe00, alloc: true,
                             write: true, exec: false },
    SectionHdrData::ProgBits { name: 180, addr: 0, align: 1,
                               data: SectionPos { offset: 0x1b780,
                                                  size: 0x1091 },
                               alloc: false, write: false, exec: false },
    SectionHdrData::ProgBits { name: 189, addr: 0, align: 1,
                               data: SectionPos { offset: 0x1c811, size: 0x18 },
                               alloc: false, write: false, exec: false },
    SectionHdrData::Strtab { name: 2, addr: 0, align: 1,
                             strs: SectionPos { offset: 0x1c829, size: 0xcc } }
];

pub const SECTION_HDR_CONTENTS_STRS: [SectionHdrData<Elf64, &'static str,
                                                     u32, u32, u32,
                                                     SectionPos<u64>,
                                                     SectionPos<u64>,
                                                     SectionPos<u64>,
                                                     SectionPos<u64>,
                                                     SectionPos<u64>,
                                                     SectionPos<u64>,
                                                     SectionPos<u64>,
                                                     SectionPos<u64>>;
                                      NUM_SECTION_HDRS] = [
    SectionHdrData::Null,
    SectionHdrData::Note { name: ".note.tag", addr: 0x270, align: 4,
                           note: SectionPos { offset: 0x270, size: 0x18 },
                           alloc: true, write: false, exec: false },
    SectionHdrData::Dynsym { name: ".dynsym", addr: 0x288, align: 8,
                             syms: SectionPos { offset: 0x288, size: 0x270 },
                             strtab: 7, local_end: 1,
                             alloc: true, write: false, exec: false },
    SectionHdrData::Unknown { name: ".gnu.version", tag: 0x6fffffff,
                              addr: 0x4f8, align: 2, offset: 0x4f8, size: 0x34,
                              ent_size: 2, link: 2, info: 0, flags: 0x2 },
    SectionHdrData::Unknown { name: ".gnu.version_d", tag: 0x6ffffffd,
                              addr: 0x52c, align: 4, offset: 0x52c, size: 0xfc,
                              ent_size: 0, link: 7, info: 9, flags: 0x2 },
    SectionHdrData::Unknown { name: ".gnu.hash", tag: 0x6ffffff6, addr: 0x628,
                              align: 8, offset: 0x628, size: 0xcc, ent_size: 0,
                              link: 2, info: 0, flags: 0x2 },
    SectionHdrData::Hash { name: ".hash", addr: 0x6f4, align: 4,
                           hash: SectionPos { offset: 0x6f4, size: 0xd8 },
                           symtab: 2, alloc: true, write: false, exec: false },
    SectionHdrData::Strtab { name: ".dynstr", addr: 0x7cc, align: 1,
                             strs: SectionPos { offset: 0x7cc, size: 0x1c0 } },
    SectionHdrData::Rela { name: ".rela.dyn", addr: 0x990, align: 8,
                           relas: SectionPos { offset: 0x990, size: 0x11a0 },
                           symtab: 2, target: 0, alloc: true, write: false,
                           exec: false },
    SectionHdrData::ProgBits { name: ".rodata", addr: 0x1b30, align: 16,
                               data: SectionPos { offset: 0x1b30,
                                                  size: 0x2eac },
                               alloc: true, write: false, exec: false },
    SectionHdrData::ProgBits { name: ".eh_frame_hdr", addr: 0x49dc, align: 4,
                               data: SectionPos { offset: 0x49dc, size: 0x224 },
                               alloc: true, write: false, exec: false },
    SectionHdrData::ProgBits { name: ".eh_frame", addr: 0x4c00, align: 8,
                               data: SectionPos { offset: 0x4c00, size: 0x824 },
                               alloc: true, write: false, exec: false },
    SectionHdrData::ProgBits { name: ".text", addr: 0x6430, align: 16,
                               data: SectionPos { offset: 0x5430,
                                                  size: 0x15c14 },
                               alloc: true, write: false, exec: true },
    SectionHdrData::Unknown { name: ".fini_array", tag: 15, addr: 0x1d048,
                              align: 8, offset: 0x1b048, size: 8, ent_size: 0,
                              link: 0, info: 0, flags: 0x3 },
    SectionHdrData::ProgBits { name: ".data.rel.ro", addr: 0x1d050, align: 16,
                               data: SectionPos { offset: 0x1b050,
                                                  size: 0x4b8 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::Dynamic { name: ".dynamic", addr: 0x1d508, align: 8,
                              strtab: 7, dynamic: SectionPos { offset: 0x1b508,
                                                               size: 0x110 },
                              alloc: true, write: true, exec: false },
    SectionHdrData::ProgBits { name: ".got", addr: 0x1d618, align: 8,
                               data: SectionPos { offset: 0x1b618, size: 0xb8 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::ProgBits { name: ".data", addr: 0x1e6d0, align: 8,
                               data: SectionPos { offset: 0x1b6d0, size: 0xb0 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::Nobits { name: ".bss", addr: 0x1e780, align: 16,
                             offset: 0x1b780, size: 0xe00, alloc: true,
                             write: true, exec: false },
    SectionHdrData::ProgBits { name: ".comment", addr: 0, align: 1,
                               data: SectionPos { offset: 0x1b780,
                                                  size: 0x1091 },
                               alloc: false, write: false, exec: false },
    SectionHdrData::ProgBits { name: ".gnu_debuglink", addr: 0, align: 1,
                               data: SectionPos { offset: 0x1c811, size: 0x18 },
                               alloc: false, write: false, exec: false },
    SectionHdrData::Strtab { name: ".shstrtab", addr: 0, align: 1,
                             strs: SectionPos { offset: 0x1c829, size: 0xcc } }
];

pub const HEADER_DATA: ElfHdrData<LittleEndian, Elf64, ElfTable<Elf64>,
                                  ElfTable<Elf64>, u16> =
    ElfHdrData {
        byteorder: PhantomData, abi: ElfABI::FreeBSD, abi_version: 0,
        kind: ElfKind::Dynamic, arch: ElfArch::X86_64,
        entry: 0x6430, flags: 0, section_hdr_strtab: 21,
        prog_hdrs: Some(ElfTable { offset: 64, num_ents: 10 }),
        section_hdrs: ElfTable { offset: 116984, num_ents: 22 }
    };
const NUM_NOTES: usize = 1;

const NOTE_1_NAME: [u8; 8] = [
    0x46, 0x72, 0x65, 0x65, 0x42, 0x53, 0x44, 0x00
];
const NOTE_1_DESC: [u8; 4] = [
    0xa2, 0xd6, 0x13, 0x00
];

pub const NOTES_CONTENTS: [NoteData<'static>; NUM_NOTES] = [
    NoteData { kind: 1, name: &NOTE_1_NAME, desc: &NOTE_1_DESC },
];

const DYNSYM_NUM_SYMS: usize = 26;

pub const DYNSYM_CONTENTS: [SymData<&'static str, u16, Elf64>;
                            DYNSYM_NUM_SYMS] = [
    SymData { name: None, value: 0, size: 0, kind: SymKind::None,
              bind: SymBind::Local, section: SymBase::Undef },
    SymData { name: Some("_rtld_allocate_tls"), value: 0xd110, size: 140,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("_rtld_get_stack_prot"), value: 0xd290, size: 12,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("dllockinit"), value: 0xb0d0, size: 54,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("dlsym"), value: 0xb2d0, size: 13,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("dlvsym"), value: 0xbaf0, size: 110,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("_rtld_addr_phdr"), value: 0xbb60, size: 231,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("_rtld_version__FreeBSD_version"), value: 0x1e720,
              size: 4, kind: SymKind::Object, bind: SymBind::Global,
              section: SymBase::Index(17) },
    SymData { name: Some("_rtld_version_laddr_offset"), value: 0x1ed88,
              size: 1, kind: SymKind::Object, bind: SymBind::Global,
              section: SymBase::Index(18) },
    SymData { name: Some("dl_iterate_phdr"), value: 0xc1c0, size: 838,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("dlerror"), value: 0xa810, size: 24,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("dlopen"), value: 0xb110, size: 14,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("r_debug_state"), value: 0x9b70, size: 6,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("dladdr"), value: 0xbc50, size: 297,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("_rtld_thread_init"), value: 0x11dc0, size: 496,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("__tls_get_addr"), value: 0x6ee0, size: 32,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("_r_debug_postinit"), value: 0xa260, size: 6,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("_rtld_is_dlopened"), value: 0xd2a0, size: 222,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("dlclose"), value: 0xae20, size: 75,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("fdlopen"), value: 0xb2c0, size: 16,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("_rtld_atfork_pre"), value: 0x11fb0, size: 151,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("_rtld_error"), value: 0x9410, size: 269,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("_rtld_free_tls"), value: 0xd1a0, size: 232,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("dlfunc"), value: 0xbae0, size: 16,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("dlinfo"), value: 0xbd80, size: 1073,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
    SymData { name: Some("_rtld_atfork_post"), value: 0x12050, size: 167,
              kind: SymKind::Function, bind: SymBind::Global,
              section: SymBase::Index(12) },
];

const REL_DYN_NUM_RELS: usize = 188;

const REL_DYN_RELS_CONTENTS_X86: [X86_64Reloc<SymData<&'static str,
                                                      u16, Elf64>>;
                                   REL_DYN_NUM_RELS] = [
    X86_64Reloc::Relative { offset: 0x1d048, addend: 0x16ff0 },
    X86_64Reloc::Relative { offset: 0x1d050, addend: 0x346a },
    X86_64Reloc::Relative { offset: 0x1d058, addend: 0x2c9e },
    X86_64Reloc::Relative { offset: 0x1d060, addend: 0x1d29 },
    X86_64Reloc::Relative { offset: 0x1d068, addend: 0x1f9a },
    X86_64Reloc::Relative { offset: 0x1d070, addend: 0x3e73 },
    X86_64Reloc::Relative { offset: 0x1d078, addend: 0x274b },
    X86_64Reloc::Relative { offset: 0x1d080, addend: 0x1ecc },
    X86_64Reloc::Relative { offset: 0x1d088, addend: 0x2574 },
    X86_64Reloc::Relative { offset: 0x1d090, addend: 0x1d43 },
    X86_64Reloc::Relative { offset: 0x1d098, addend: 0x4372 },
    X86_64Reloc::Relative { offset: 0x1d0a0, addend: 0x4008 },
    X86_64Reloc::Relative { offset: 0x1d0a8, addend: 0x283c },
    X86_64Reloc::Relative { offset: 0x1d0b0, addend: 0x384c },
    X86_64Reloc::Relative { offset: 0x1d0b8, addend: 0x275e },
    X86_64Reloc::Relative { offset: 0x1d0c0, addend: 0x44f4 },
    X86_64Reloc::Relative { offset: 0x1d0c8, addend: 0x322f },
    X86_64Reloc::Relative { offset: 0x1d0d0, addend: 0x39c9 },
    X86_64Reloc::Relative { offset: 0x1d0d8, addend: 0x4209 },
    X86_64Reloc::Relative { offset: 0x1d0e0, addend: 0x2cb6 },
    X86_64Reloc::Relative { offset: 0x1d0e8, addend: 0x401b },
    X86_64Reloc::Relative { offset: 0x1d0f0, addend: 0x403d },
    X86_64Reloc::Relative { offset: 0x1d0f8, addend: 0x33ab },
    X86_64Reloc::Relative { offset: 0x1d100, addend: 0x4386 },
    X86_64Reloc::Relative { offset: 0x1d108, addend: 0x1d55 },
    X86_64Reloc::Relative { offset: 0x1d110, addend: 0x4397 },
    X86_64Reloc::Relative { offset: 0x1d118, addend: 0x2657 },
    X86_64Reloc::Relative { offset: 0x1d120, addend: 0x389a },
    X86_64Reloc::Relative { offset: 0x1d128, addend: 0x3559 },
    X86_64Reloc::Relative { offset: 0x1d130, addend: 0x3476 },
    X86_64Reloc::Relative { offset: 0x1d138, addend: 0x22d3 },
    X86_64Reloc::Relative { offset: 0x1d140, addend: 0x38a9 },
    X86_64Reloc::Relative { offset: 0x1d148, addend: 0x3d4a },
    X86_64Reloc::Relative { offset: 0x1d150, addend: 0x43ab },
    X86_64Reloc::Relative { offset: 0x1d158, addend: 0x1d73 },
    X86_64Reloc::Relative { offset: 0x1d160, addend: 0x33ba },
    X86_64Reloc::Relative { offset: 0x1d168, addend: 0x36fa },
    X86_64Reloc::Relative { offset: 0x1d170, addend: 0x2770 },
    X86_64Reloc::Relative { offset: 0x1d178, addend: 0x248d },
    X86_64Reloc::Relative { offset: 0x1d180, addend: 0x24ab },
    X86_64Reloc::Relative { offset: 0x1d188, addend: 0x39d5 },
    X86_64Reloc::Relative { offset: 0x1d190, addend: 0x3d59 },
    X86_64Reloc::Relative { offset: 0x1d198, addend: 0x39f2 },
    X86_64Reloc::Relative { offset: 0x1d1a0, addend: 0x1faa },
    X86_64Reloc::Relative { offset: 0x1d1a8, addend: 0x38bf },
    X86_64Reloc::Relative { offset: 0x1d1b0, addend: 0x3f42 },
    X86_64Reloc::Relative { offset: 0x1d1b8, addend: 0x3245 },
    X86_64Reloc::Relative { offset: 0x1d1c0, addend: 0x3f5c },
    X86_64Reloc::Relative { offset: 0x1d1c8, addend: 0x2bca },
    X86_64Reloc::Relative { offset: 0x1d1d0, addend: 0x1d94 },
    X86_64Reloc::Relative { offset: 0x1d1d8, addend: 0x3042 },
    X86_64Reloc::Relative { offset: 0x1d1e0, addend: 0x348e },
    X86_64Reloc::Relative { offset: 0x1d1e8, addend: 0x43b7 },
    X86_64Reloc::Relative { offset: 0x1d1f0, addend: 0x299f },
    X86_64Reloc::Relative { offset: 0x1d1f8, addend: 0x2856 },
    X86_64Reloc::Relative { offset: 0x1d200, addend: 0x3568 },
    X86_64Reloc::Relative { offset: 0x1d208, addend: 0x4215 },
    X86_64Reloc::Relative { offset: 0x1d210, addend: 0x38d6 },
    X86_64Reloc::Relative { offset: 0x1d218, addend: 0x2e1a },
    X86_64Reloc::Relative { offset: 0x1d220, addend: 0x43ce },
    X86_64Reloc::Relative { offset: 0x1d228, addend: 0x2bfa },
    X86_64Reloc::Relative { offset: 0x1d230, addend: 0x38f2 },
    X86_64Reloc::Relative { offset: 0x1d238, addend: 0x3e8b },
    X86_64Reloc::Relative { offset: 0x1d240, addend: 0x2676 },
    X86_64Reloc::Relative { offset: 0x1d248, addend: 0x1dab },
    X86_64Reloc::Relative { offset: 0x1d250, addend: 0x2698 },
    X86_64Reloc::Relative { offset: 0x1d258, addend: 0x3906 },
    X86_64Reloc::Relative { offset: 0x1d260, addend: 0x3e9e },
    X86_64Reloc::Relative { offset: 0x1d268, addend: 0x216a },
    X86_64Reloc::Relative { offset: 0x1d270, addend: 0x24ca },
    X86_64Reloc::Relative { offset: 0x1d278, addend: 0x43ef },
    X86_64Reloc::Relative { offset: 0x1d280, addend: 0x29c3 },
    X86_64Reloc::Relative { offset: 0x1d288, addend: 0x2e32 },
    X86_64Reloc::Relative { offset: 0x1d290, addend: 0x22e0 },
    X86_64Reloc::Relative { offset: 0x1d298, addend: 0x2cc8 },
    X86_64Reloc::Relative { offset: 0x1d2a0, addend: 0x3eb2 },
    X86_64Reloc::Relative { offset: 0x1d2a8, addend: 0x1dbe },
    X86_64Reloc::Relative { offset: 0x1d2b0, addend: 0x2877 },
    X86_64Reloc::Relative { offset: 0x1d2b8, addend: 0x33cb },
    X86_64Reloc::Relative { offset: 0x1d2c0, addend: 0x422f },
    X86_64Reloc::Relative { offset: 0x1d2c8, addend: 0x2cda },
    X86_64Reloc::Relative { offset: 0x1d2d0, addend: 0x2cfc },
    X86_64Reloc::Relative { offset: 0x1d2d8, addend: 0x4403 },
    X86_64Reloc::Relative { offset: 0x1d2e0, addend: 0x26a5 },
    X86_64Reloc::Relative { offset: 0x1d2e8, addend: 0x24d9 },
    X86_64Reloc::Relative { offset: 0x1d2f0, addend: 0x325d },
    X86_64Reloc::Relative { offset: 0x1d2f8, addend: 0x371b },
    X86_64Reloc::Relative { offset: 0x1d300, addend: 0x4416 },
    X86_64Reloc::Relative { offset: 0x1d308, addend: 0x1dd4 },
    X86_64Reloc::Relative { offset: 0x1d310, addend: 0x2d11 },
    X86_64Reloc::Relative { offset: 0x1d318, addend: 0x258b },
    X86_64Reloc::Relative { offset: 0x1d320, addend: 0x24f4 },
    X86_64Reloc::Relative { offset: 0x1d328, addend: 0x3287 },
    X86_64Reloc::Relative { offset: 0x1d330, addend: 0x217d },
    X86_64Reloc::Relative { offset: 0x1d338, addend: 0x3581 },
    X86_64Reloc::Relative { offset: 0x1d340, addend: 0x29d9 },
    X86_64Reloc::Relative { offset: 0x1d348, addend: 0x218c },
    X86_64Reloc::Relative { offset: 0x1d350, addend: 0x4500 },
    X86_64Reloc::Relative { offset: 0x1d358, addend: 0x21a2 },
    X86_64Reloc::Relative { offset: 0x1d360, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d368, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d370, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d378, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d380, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d388, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d390, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d398, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d3a0, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d3a8, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d3b0, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d3b8, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d3c0, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d3c8, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d3d0, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d3d8, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d3e0, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d3e8, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d3f0, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d3f8, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d400, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d408, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d410, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d418, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d420, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d428, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d430, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d438, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d440, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d448, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d450, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d458, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d460, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d468, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d470, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d478, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d480, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d488, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d490, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d498, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d4a0, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d4a8, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d4b0, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d4b8, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d4c0, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d4c8, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d4d0, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d4d8, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d4e0, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d4e8, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d4f0, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d4f8, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d500, addend: 0x49c8 },
    X86_64Reloc::Relative { offset: 0x1d618, addend: 0x6450 },
    X86_64Reloc::Relative { offset: 0x1d620, addend: 0x1ea78 },
    X86_64Reloc::Relative { offset: 0x1d628, addend: 0x1e748 },
    X86_64Reloc::Relative { offset: 0x1d630, addend: 0x1ed38 },
    X86_64Reloc::Relative { offset: 0x1d638, addend: 0x1ed30 },
    X86_64Reloc::Relative { offset: 0x1d640, addend: 0x49d8 },
    X86_64Reloc::Relative { offset: 0x1d648, addend: 0x1d050 },
    X86_64Reloc::Relative { offset: 0x1d650, addend: 0x1ed50 },
    X86_64Reloc::Relative { offset: 0x1d658, addend: 0x9b70 },
    X86_64Reloc::Relative { offset: 0x1d660, addend: 0x1f540 },
    X86_64Reloc::Relative { offset: 0x1d668, addend: 0x1e780 },
    X86_64Reloc::Relative { offset: 0x1d670, addend: 0x1e784 },
    X86_64Reloc::Relative { offset: 0x1d678, addend: 0x1e788 },
    X86_64Reloc::Relative { offset: 0x1d680, addend: 0x1e78c },
    X86_64Reloc::Relative { offset: 0x1d688, addend: 0x1e758 },
    X86_64Reloc::Relative { offset: 0x1d690, addend: 0x1e790 },
    X86_64Reloc::Relative { offset: 0x1d698, addend: 0x1ed80 },
    X86_64Reloc::Relative { offset: 0x1d6a0, addend: 0x1ed78 },
    X86_64Reloc::Relative { offset: 0x1d6a8, addend: 0x1e6d0 },
    X86_64Reloc::Relative { offset: 0x1d6b0, addend: 0x1e6d8 },
    X86_64Reloc::Relative { offset: 0x1d6b8, addend: 0x1e6e8 },
    X86_64Reloc::Relative { offset: 0x1d6c0, addend: 0x1ea48 },
    X86_64Reloc::Relative { offset: 0x1d6c8, addend: 0x1ea40 },
    X86_64Reloc::Relative { offset: 0x1e6e0, addend: 0x3a59 },
    X86_64Reloc::Relative { offset: 0x1e6e8, addend: 0x359b },
    X86_64Reloc::Relative { offset: 0x1e6f0, addend: 0x3f7a },
    X86_64Reloc::Relative { offset: 0x1e6f8, addend: 0x1de8 },
    X86_64Reloc::Relative { offset: 0x1e700, addend: 0x3d6a },
    X86_64Reloc::Relative { offset: 0x1e718, addend: 0x1e710 },
    X86_64Reloc::Relative { offset: 0x1e730, addend: 0x1e728 },
    X86_64Reloc::Relative { offset: 0x1e740, addend: 0x1e738 },
    X86_64Reloc::Relative { offset: 0x1e748, addend: 0x1f340 },
    X86_64Reloc::Relative { offset: 0x1e750, addend: 0x1f350 },
    X86_64Reloc::Relative { offset: 0x1e758, addend: 0x1f360 },
    X86_64Reloc::Relative { offset: 0x1e768, addend: 0x1e760 },
    X86_64Reloc::Relative { offset: 0x1e778, addend: 0x1e770 },
];

const STRTAB_NUM_STRS: usize = 35;

pub const STRTAB_CONTENTS: [(&'static str, usize); STRTAB_NUM_STRS] = [
    ("", 0),
    ("__tls_get_addr", 1),
    ("_rtld_error", 16),
    ("_r_debug_postinit", 28),
    ("_rtld_addr_phdr", 46),
    ("_rtld_allocate_tls", 62),
    ("_rtld_free_tls", 81),
    ("_rtld_get_stack_prot", 96),
    ("_rtld_is_dlopened", 117),
    ("_rtld_version__FreeBSD_version", 135),
    ("_rtld_version_laddr_offset", 166),
    ("dl_iterate_phdr", 193),
    ("dladdr", 209),
    ("dlclose", 216),
    ("dlerror", 224),
    ("dlfunc", 232),
    ("dlinfo", 239),
    ("dllockinit", 246),
    ("dlopen", 257),
    ("dlsym", 264),
    ("dlvsym", 270),
    ("fdlopen", 277),
    ("r_debug_state", 285),
    ("_rtld_atfork_post", 299),
    ("_rtld_atfork_pre", 317),
    ("_rtld_thread_init", 334),
    ("ld-elf.so.1.full", 352),
    ("FBSD_1.0", 369),
    ("FBSD_1.1", 378),
    ("FBSD_1.2", 387),
    ("FBSD_1.3", 396),
    ("FBSD_1.4", 405),
    ("FBSD_1.5", 414),
    ("FBSD_1.6", 423),
    ("FBSDprivate_1.0", 432),
];

const SHSTRTAB_NUM_STRS: usize = 23;

pub const SHSTRTAB_CONTENTS: [(&'static str, usize); SHSTRTAB_NUM_STRS] = [
    ("", 0),
    ("", 1),
    (".shstrtab", 2),
    (".note.tag", 12),
    (".dynsym", 22),
    (".gnu.version", 30),
    (".gnu.version_d", 43),
    (".gnu.hash", 58),
    (".hash", 68),
    (".dynstr", 74),
    (".rela.dyn", 82),
    (".rodata", 92),
    (".eh_frame_hdr", 100),
    (".eh_frame", 114),
    (".text", 124),
    (".fini_array", 130),
    (".data.rel.ro", 142),
    (".dynamic", 155),
    (".got", 164),
    (".data", 169),
    (".bss", 175),
    (".comment", 180),
    (".gnu_debuglink", 189),
];

const NUM_DYNAMIC_ENTS: usize = 17;

const DYNAMIC_ENTS: [DynamicEntData<&'static str, u64, Elf64>;
                     NUM_DYNAMIC_ENTS] = [
    DynamicEntData::Flags { flags: 0x2 },
    DynamicEntData::Rela { tab: 0x990 },
    DynamicEntData::RelaSize { size: 4512 },
    DynamicEntData::RelaEntSize { size: 24 },
    DynamicEntData::Unknown { tag: 0x6ffffff9, info: 188 },
    DynamicEntData::Symtab { tab: 0x288 },
    DynamicEntData::SymtabEntSize { size: 24 },
    DynamicEntData::Strtab { tab: 0x7cc },
    DynamicEntData::StrtabSize { size: 448 },
    DynamicEntData::Unknown { tag: 0x6ffffef5, info: 0x628 },
    DynamicEntData::Hash { tab: 0x6f4 },
    DynamicEntData::FiniArray { arr: 0x1d048 },
    DynamicEntData::FiniArraySize { size: 8 },
    DynamicEntData::Unknown { tag: 0x6ffffff0, info: 0x4f8 },
    DynamicEntData::Unknown { tag: 0x6ffffffc, info: 0x52c },
    DynamicEntData::Unknown { tag: 0x6ffffffd, info: 0x9 },
    DynamicEntData::None
];

pub const EXPECTED: [SectionHdrData<Elf64, &'static str,
                                    u32,
                                    SymsStrs<&'static [SymData<&'static str,
                                                               u16, Elf64>],
                                             &'static [(&'static str, usize)]>,
                                    &'static [(&'static str, usize)],
                                    SectionPos<u64>,
                                    &'static [SymData<&'static str,
                                                      u16, Elf64>],
                                    &'static [(&'static str, usize)],
                                    &'static [X86_64Reloc<SymData<&'static str,
                                                                  u16, Elf64>>],
                                    &'static [X86_64Reloc<SymData<&'static str,
                                                                  u16, Elf64>>],
                                    SectionPos<u64>,
                                    &'static [DynamicEntData<&'static str,
                                                             u64, Elf64>],
                                    &'static [NoteData<'static>]>;
                     NUM_SECTION_HDRS] = [
    SectionHdrData::Null,
    SectionHdrData::Note { name: ".note.tag", addr: 0x270, align: 4,
                           note: &NOTES_CONTENTS, alloc: true,
                           write: false, exec: false },
    SectionHdrData::Dynsym { name: ".dynsym", addr: 0x288, align: 8,
                             syms: &DYNSYM_CONTENTS,
                             strtab: &STRTAB_CONTENTS, local_end: 1,
                             alloc: true, write: false, exec: false },
    SectionHdrData::Unknown { name: ".gnu.version", tag: 0x6fffffff,
                              addr: 0x4f8, align: 2, offset: 0x4f8, size: 0x34,
                              ent_size: 2, link: 2, info: 0, flags: 0x2 },
    SectionHdrData::Unknown { name: ".gnu.version_d", tag: 0x6ffffffd,
                              addr: 0x52c, align: 4, offset: 0x52c, size: 0xfc,
                              ent_size: 0, link: 7, info: 9, flags: 0x2 },
    SectionHdrData::Unknown { name: ".gnu.hash", tag: 0x6ffffff6, addr: 0x628,
                              align: 8, offset: 0x628, size: 0xcc, ent_size: 0,
                              link: 2, info: 0, flags: 0x2 },
    SectionHdrData::Hash { name: ".hash", addr: 0x6f4, align: 8,
                           hash: SectionPos { offset: 0x6f4, size: 0xd8 },
                           symtab: SymsStrs { syms: &DYNSYM_CONTENTS,
                                              strs: &STRTAB_CONTENTS },
                           alloc: true, write: false, exec: false },
    SectionHdrData::Strtab { name: ".dynstr", addr: 0x7cc, align: 1,
                             strs: &STRTAB_CONTENTS },
    SectionHdrData::Rela { name: ".rela.dyn", addr: 0x990, align: 8,
                           relas: &REL_DYN_RELS_CONTENTS_X86,
                           symtab: SymsStrs { syms: &DYNSYM_CONTENTS,
                                              strs: &STRTAB_CONTENTS },
                           target: 0, alloc: true, write: false, exec: false },
    SectionHdrData::ProgBits { name: ".rodata", addr: 0x1b30, align: 16,
                               data: SectionPos { offset: 0x1b30,
                                                  size: 0x2eac },
                               alloc: true, write: false, exec: false },
    SectionHdrData::ProgBits { name: ".eh_frame_hdr", addr: 0x49dc, align: 4,
                               data: SectionPos { offset: 0x49dc, size: 0x224 },
                               alloc: true, write: false, exec: false },
    SectionHdrData::ProgBits { name: ".eh_frame", addr: 0x4c00, align: 8,
                               data: SectionPos { offset: 0x4c00, size: 0x824 },
                               alloc: true, write: false, exec: false },
    SectionHdrData::ProgBits { name: ".text", addr: 0x6430, align: 16,
                               data: SectionPos { offset: 0x5430,
                                                  size: 0x15c14 },
                               alloc: true, write: false, exec: true },
    SectionHdrData::Unknown { name: ".fini_array", tag: 15, addr: 0x1d048,
                              align: 8, offset: 0x1b048, size: 4, ent_size: 0,
                              link: 0, info: 0, flags: 0x3 },
    SectionHdrData::ProgBits { name: ".data.rel.ro", addr: 0x1d050, align: 16,
                               data: SectionPos { offset: 0x1b050,
                                                  size: 0x4b8 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::Dynamic { name: ".dynamic", addr: 0x1d508, align: 16,
                              strtab: &STRTAB_CONTENTS, dynamic: &DYNAMIC_ENTS,
                              alloc: true, write: true, exec: false },
    SectionHdrData::ProgBits { name: ".got", addr: 0x1d618, align: 8,
                               data: SectionPos { offset: 0x1b618, size: 0xb8 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::ProgBits { name: ".data", addr: 0x1e6d0, align: 8,
                               data: SectionPos { offset: 0x1b6d0, size: 0xb0 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::Nobits { name: ".bss", addr: 0x1e780, align: 16,
                             offset: 0x1b780, size: 0xe00, alloc: true,
                             write: true, exec: false },
    SectionHdrData::ProgBits { name: ".comment", addr: 0, align: 1,
                               data: SectionPos { offset: 0x1b780,
                                                  size: 0x1091 },
                               alloc: false, write: false, exec: false },
    SectionHdrData::ProgBits { name: ".gnu_debuglink", addr: 0, align: 1,
                               data: SectionPos { offset: 0x1c811, size: 0x18 },
                               alloc: false, write: false, exec: false },
    SectionHdrData::Strtab { name: ".shstrtab", addr: 0, align: 1,
                             strs: &SHSTRTAB_CONTENTS }
];
