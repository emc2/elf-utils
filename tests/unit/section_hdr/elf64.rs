use byteorder::LittleEndian;
use core::convert::TryFrom;
use core::convert::TryInto;
use elf_utils::Elf64;
use elf_utils::section_hdr::SectionHdr;
use elf_utils::section_hdr::SectionHdrData;
use elf_utils::section_hdr::SectionHdrs;
use elf_utils::section_hdr::SectionHdrsError;
use elf_utils::section_hdr::SectionPos;
use elf_utils::strtab::Strtab;
use elf_utils::strtab::WithStrtab;

const ELF64_SECTION_HDR_BYTES: usize = 1984;

const ELF64_NUM_SECTION_HDRS: usize = 31;

const ELF64_SECTION_HDR: [u8; ELF64_SECTION_HDR_BYTES] = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xa8, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xa8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x14, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc0, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1e, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc0, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x26, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x6f,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc8, 0x0f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc8, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x33, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0x6f,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xd8, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xd8, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x42, 0x00, 0x00, 0x00, 0xf6, 0xff, 0xff, 0x6f,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x11, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x4c, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x64, 0x11, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x64, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x52, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xac, 0x15, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xac, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xa8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x5a, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x58, 0x1a, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x58, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x64, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xe8, 0x1a, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xe8, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xe8, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x6e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xd0, 0x26, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xd0, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x31, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x76, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x74, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x6c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x84, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x70, 0x7c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x70, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xcc, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x8e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0xb9, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0xa9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xbc, 0xb7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x94, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xfc, 0x70, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xfc, 0x60, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x9a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x71, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x61, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xa0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x71, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x61, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xa5, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x89, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x69, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xac, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0x89, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0x69, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xb3, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x89, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x69, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xb8, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x89, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x69, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc4, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x50, 0x89, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x50, 0x69, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x90, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xcd, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xe0, 0x8a, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xe0, 0x6a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xd2, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xf0, 0x8a, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xe8, 0x6a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xde, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x9c, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x6c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xe4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xe8, 0x9c, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xe8, 0x6c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xed, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xa1, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xf8, 0x70, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xd8, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xf2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xf8, 0x70, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x76, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xfb, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x6e, 0x7b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7e, 0x7b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
];

const ELF64_STRTAB_BYTES: usize = 266;

const ELF64_STRTAB: [u8; ELF64_STRTAB_BYTES] = [
    0x00, 0x00, 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72,
    0x74, 0x61, 0x62, 0x00, 0x2e, 0x69, 0x6e, 0x74,
    0x65, 0x72, 0x70, 0x00, 0x2e, 0x6e, 0x6f, 0x74,
    0x65, 0x2e, 0x74, 0x61, 0x67, 0x00, 0x2e, 0x64,
    0x79, 0x6e, 0x73, 0x79, 0x6d, 0x00, 0x2e, 0x67,
    0x6e, 0x75, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69,
    0x6f, 0x6e, 0x00, 0x2e, 0x67, 0x6e, 0x75, 0x2e,
    0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
    0x72, 0x00, 0x2e, 0x67, 0x6e, 0x75, 0x2e, 0x68,
    0x61, 0x73, 0x68, 0x00, 0x2e, 0x68, 0x61, 0x73,
    0x68, 0x00, 0x2e, 0x64, 0x79, 0x6e, 0x73, 0x74,
    0x72, 0x00, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e,
    0x64, 0x79, 0x6e, 0x00, 0x2e, 0x72, 0x65, 0x6c,
    0x61, 0x2e, 0x70, 0x6c, 0x74, 0x00, 0x2e, 0x72,
    0x6f, 0x64, 0x61, 0x74, 0x61, 0x00, 0x2e, 0x65,
    0x68, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f,
    0x68, 0x64, 0x72, 0x00, 0x2e, 0x65, 0x68, 0x5f,
    0x66, 0x72, 0x61, 0x6d, 0x65, 0x00, 0x2e, 0x74,
    0x65, 0x78, 0x74, 0x00, 0x2e, 0x69, 0x6e, 0x69,
    0x74, 0x00, 0x2e, 0x66, 0x69, 0x6e, 0x69, 0x00,
    0x2e, 0x70, 0x6c, 0x74, 0x00, 0x2e, 0x63, 0x74,
    0x6f, 0x72, 0x73, 0x00, 0x2e, 0x64, 0x74, 0x6f,
    0x72, 0x73, 0x00, 0x2e, 0x6a, 0x63, 0x72, 0x00,
    0x2e, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x61, 0x72,
    0x72, 0x61, 0x79, 0x00, 0x2e, 0x64, 0x79, 0x6e,
    0x61, 0x6d, 0x69, 0x63, 0x00, 0x2e, 0x67, 0x6f,
    0x74, 0x00, 0x2e, 0x62, 0x73, 0x73, 0x2e, 0x72,
    0x65, 0x6c, 0x2e, 0x72, 0x6f, 0x00, 0x2e, 0x64,
    0x61, 0x74, 0x61, 0x00, 0x2e, 0x67, 0x6f, 0x74,
    0x2e, 0x70, 0x6c, 0x74, 0x00, 0x2e, 0x62, 0x73,
    0x73, 0x00, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
    0x6e, 0x74, 0x00, 0x2e, 0x67, 0x6e, 0x75, 0x5f,
    0x64, 0x65, 0x62, 0x75, 0x67, 0x6c, 0x69, 0x6e,
    0x6b, 0x00
];

const ELF64_SECTION_HDR_CONTENTS_BARE: [SectionHdrData<Elf64, u32, u32,
                                                       u32, u32,
                                                       SectionPos<u64>,
                                                       SectionPos<u64>,
                                                       SectionPos<u64>,
                                                       SectionPos<u64>,
                                                       SectionPos<u64>,
                                                       SectionPos<u64>,
                                                       SectionPos<u64>,
                                                       SectionPos<u64>>;
                                        ELF64_NUM_SECTION_HDRS] = [
    SectionHdrData::Null,
    SectionHdrData::ProgBits { name: 12, addr: 0x2002a8, align: 1,
                               data: SectionPos { offset: 0x2a8, size: 0x15 },
                               alloc: true, write: false, exec: false },
    SectionHdrData::Note { name: 20, addr: 0x2002c0, align: 4,
                           note: SectionPos { offset: 0x2c0, size: 0x48 },
                           alloc: true, write: false, exec: false },
    SectionHdrData::Dynsym { name: 30, addr: 0x200308, align: 8,
                             syms: SectionPos { offset: 0x308, size: 0xcc0 },
                             strtab: 8, local_end: 1,
                             alloc: true, write: false, exec: false },
    SectionHdrData::Unknown { name: 38, tag: 0x6fffffff, addr: 0x200fc8,
                              align: 2, offset: 0xfc8, size: 0x110, ent_size: 2,
                              link: 3, info: 0, flags: 0x2 },
    SectionHdrData::Unknown { name: 51, tag: 0x6ffffffe, addr: 0x2010d8,
                              align: 4, offset: 0x10d8, size: 0x40, ent_size: 0,
                              link: 8, info: 1, flags: 0x2 },
    SectionHdrData::Unknown { name: 66, tag: 0x6ffffff6, addr: 0x201118,
                              align: 8, offset: 0x1118, size: 0x4c, ent_size: 0,
                              link: 3, info: 0, flags: 0x2 },
    SectionHdrData::Hash { name: 76, addr: 0x201164, align: 4,
                           hash: SectionPos { offset: 0x1164, size: 0x448 },
                           symtab: 3, alloc: true, write: false, exec: false },
    SectionHdrData::Strtab { name: 82, addr: 0x2015ac, align: 1,
                             strs: SectionPos { offset: 0x15ac, size: 0x4a8 } },
    SectionHdrData::Rela { name: 90, addr: 0x201a58, align: 8,
                           relas: SectionPos { offset: 0x1a58, size: 0x90 },
                           symtab: 3, target: 0, alloc: true, write: false,
                           exec: false },
    SectionHdrData::Rela { name: 100, addr: 0x201ae8, align: 8,
                           relas: SectionPos { offset: 0x1ae8, size: 0xbe8 },
                           symtab: 3, target: 26, alloc: true, write: false,
                           exec: false },
    SectionHdrData::ProgBits { name: 110, addr: 0x2026d0, align: 16,
                               data: SectionPos { offset: 0x26d0,
                                                  size: 0x4d31 },
                               alloc: true, write: false, exec: false },
    SectionHdrData::ProgBits { name: 118, addr: 0x207404, align: 4,
                               data: SectionPos { offset: 0x7404, size: 0x86c },
                               alloc: true, write: false, exec: false },
    SectionHdrData::ProgBits { name: 132, addr: 0x207c70, align: 8,
                               data: SectionPos { offset: 0x7c70,
                                                  size: 0x2ccc },
                               alloc: true, write: false, exec: false },
    SectionHdrData::ProgBits { name: 142, addr: 0x20b940, align: 16,
                               data: SectionPos { offset: 0xa940,
                                                  size: 0x1b7bc },
                               alloc: true, write: false, exec: true },
    SectionHdrData::ProgBits { name: 148, addr: 0x2270fc, align: 4,
                               data: SectionPos { offset: 0x260fc, size: 0xe },
                               alloc: true, write: false, exec: true },
    SectionHdrData::ProgBits { name: 154, addr: 0x22710c, align: 4,
                               data: SectionPos { offset: 0x2610c, size: 0xe },
                               alloc: true, write: false, exec: true },
    SectionHdrData::ProgBits { name: 160, addr: 0x227120, align: 16,
                               data: SectionPos { offset: 0x26120,
                                                  size: 0x800 },
                               alloc: true, write: false, exec: true },
    SectionHdrData::ProgBits { name: 165, addr: 0x228920, align: 8,
                               data: SectionPos { offset: 0x26920,
                                                  size: 0x10 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::ProgBits { name: 172, addr: 0x228930, align: 8,
                               data: SectionPos { offset: 0x26930,
                                                  size: 0x10 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::ProgBits { name: 179, addr: 0x228940, align: 8,
                               data: SectionPos { offset: 0x26940,
                                                  size: 0x8 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::Unknown { name: 184, tag: 14, addr: 0x228948, align: 8,
                              offset: 0x26948, size: 8, ent_size: 0, link: 0,
                              info: 0, flags: 0x3 },
    SectionHdrData::Dynamic { name: 196, addr: 0x228950, align: 8, strtab: 8,
                              dynamic: SectionPos { offset: 0x26950,
                                                    size: 0x190 },
                              alloc: true, write: true, exec: false },
    SectionHdrData::ProgBits { name: 205, addr: 0x228ae0, align: 8,
                               data: SectionPos { offset: 0x26ae0,
                                                  size: 0x8 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::Nobits { name: 210, addr: 0x228af0, align: 16,
                             offset: 0x26ae8, size: 0x110, alloc: true,
                             write: true, exec: false },
    SectionHdrData::ProgBits { name: 222, addr: 0x229c00, align: 8,
                               data: SectionPos { offset: 0x26c00,
                                                  size: 0xe8 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::ProgBits { name: 228, addr: 0x229ce8, align: 8,
                               data: SectionPos { offset: 0x26ce8,
                                                  size: 0x410 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::Nobits { name: 237, addr: 0x22a100, align: 32,
                             offset: 0x270f8, size: 0x13d8, alloc: true,
                             write: true, exec: false },
    SectionHdrData::ProgBits { name: 242, addr: 0, align: 1,
                               data: SectionPos { offset: 0x270f8,
                                                  size: 0xa76 },
                               alloc: false, write: false, exec: false },
    SectionHdrData::ProgBits { name: 251, addr: 0, align: 1,
                               data: SectionPos { offset: 0x27b6e,
                                                  size: 0x10 },
                               alloc: false, write: false, exec: false },
    SectionHdrData::Strtab { name: 2, addr: 0, align: 1,
                             strs: SectionPos { offset: 0x27b7e,
                                                size: 0x10a } }
];

const ELF64_SECTION_HDR_CONTENTS_STRS: [SectionHdrData<Elf64,
                                                       Result<&'static str,
                                                              &'static [u8]>,
                                                       u32, u32, u32,
                                                       SectionPos<u64>,
                                                       SectionPos<u64>,
                                                       SectionPos<u64>,
                                                       SectionPos<u64>,
                                                       SectionPos<u64>,
                                                       SectionPos<u64>,
                                                       SectionPos<u64>,
                                                       SectionPos<u64>>;
                                        ELF64_NUM_SECTION_HDRS] = [
    SectionHdrData::Null,
    SectionHdrData::ProgBits { name: Ok(".interp"), addr: 0x2002a8, align: 1,
                               data: SectionPos { offset: 0x2a8, size: 0x15 },
                               alloc: true, write: false, exec: false },
    SectionHdrData::Note { name: Ok(".note.tag"), addr: 0x2002c0, align: 4,
                           note: SectionPos { offset: 0x2c0, size: 0x48 },
                           alloc: true, write: false, exec: false },
    SectionHdrData::Dynsym { name: Ok(".dynsym"), addr: 0x200308, align: 8,
                             syms: SectionPos { offset: 0x308, size: 0xcc0 },
                             strtab: 8, local_end: 1,
                             alloc: true, write: false, exec: false },
    SectionHdrData::Unknown { name: Ok(".gnu.version"), tag: 0x6fffffff,
                              addr: 0x200fc8, align: 2, offset: 0xfc8,
                              size: 0x110, ent_size: 2, link: 3, info: 0,
                              flags: 0x2 },
    SectionHdrData::Unknown { name: Ok(".gnu.version_r"), tag: 0x6ffffffe,
                              addr: 0x2010d8, align: 4, offset: 0x10d8,
                              size: 0x40, ent_size: 0, link: 8, info: 1,
                              flags: 0x2 },
    SectionHdrData::Unknown { name: Ok(".gnu.hash"), tag: 0x6ffffff6,
                              addr: 0x201118, align: 8, offset: 0x1118,
                              size: 0x4c, ent_size: 0, link: 3, info: 0,
                              flags: 0x2 },
    SectionHdrData::Hash { name: Ok(".hash"), addr: 0x201164, align: 4,
                           hash: SectionPos { offset: 0x1164, size: 0x448 },
                           symtab: 3, alloc: true, write: false, exec: false },
    SectionHdrData::Strtab { name: Ok(".dynstr"), addr: 0x2015ac, align: 1,
                             strs: SectionPos { offset: 0x15ac, size: 0x4a8 } },
    SectionHdrData::Rela { name: Ok(".rela.dyn"), addr: 0x201a58, align: 8,
                           relas: SectionPos { offset: 0x1a58, size: 0x90 },
                           symtab: 3, target: 0, alloc: true, write: false,
                           exec: false },
    SectionHdrData::Rela { name: Ok(".rela.plt"), addr: 0x201ae8, align: 8,
                           relas: SectionPos { offset: 0x1ae8, size: 0xbe8 },
                           symtab: 3, target: 26, alloc: true, write: false,
                           exec: false },
    SectionHdrData::ProgBits { name: Ok(".rodata"), addr: 0x2026d0, align: 16,
                               data: SectionPos { offset: 0x26d0,
                                                  size: 0x4d31 },
                               alloc: true, write: false, exec: false },
    SectionHdrData::ProgBits { name: Ok(".eh_frame_hdr"), addr: 0x207404,
                               align: 4, data: SectionPos { offset: 0x7404,
                                                            size: 0x86c },
                               alloc: true, write: false, exec: false },
    SectionHdrData::ProgBits { name: Ok(".eh_frame"), addr: 0x207c70, align: 8,
                               data: SectionPos { offset: 0x7c70,
                                                  size: 0x2ccc },
                               alloc: true, write: false, exec: false },
    SectionHdrData::ProgBits { name: Ok(".text"), addr: 0x20b940, align: 16,
                               data: SectionPos { offset: 0xa940,
                                                  size: 0x1b7bc },
                               alloc: true, write: false, exec: true },
    SectionHdrData::ProgBits { name: Ok(".init"), addr: 0x2270fc, align: 4,
                               data: SectionPos { offset: 0x260fc, size: 0xe },
                               alloc: true, write: false, exec: true },
    SectionHdrData::ProgBits { name: Ok(".fini"), addr: 0x22710c, align: 4,
                               data: SectionPos { offset: 0x2610c, size: 0xe },
                               alloc: true, write: false, exec: true },
    SectionHdrData::ProgBits { name: Ok(".plt"), addr: 0x227120, align: 16,
                               data: SectionPos { offset: 0x26120,
                                                  size: 0x800 },
                               alloc: true, write: false, exec: true },
    SectionHdrData::ProgBits { name: Ok(".ctors"), addr: 0x228920, align: 8,
                               data: SectionPos { offset: 0x26920,
                                                  size: 0x10 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::ProgBits { name: Ok(".dtors"), addr: 0x228930, align: 8,
                               data: SectionPos { offset: 0x26930,
                                                  size: 0x10 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::ProgBits { name: Ok(".jcr"), addr: 0x228940, align: 8,
                               data: SectionPos { offset: 0x26940,
                                                  size: 0x8 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::Unknown { name: Ok(".init_array"), tag: 14, addr: 0x228948,
                              align: 8, offset: 0x26948, size: 8, ent_size: 0,
                              link: 0, info: 0, flags: 0x3 },
    SectionHdrData::Dynamic { name: Ok(".dynamic"), addr: 0x228950, align: 8,
                              strtab: 8, dynamic: SectionPos { offset: 0x26950,
                                                               size: 0x190 },
                              alloc: true, write: true, exec: false },
    SectionHdrData::ProgBits { name: Ok(".got"), addr: 0x228ae0, align: 8,
                               data: SectionPos { offset: 0x26ae0,
                                                  size: 0x8 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::Nobits { name: Ok(".bss.rel.ro"), addr: 0x228af0, align: 16,
                             offset: 0x26ae8, size: 0x110, alloc: true,
                             write: true, exec: false },
    SectionHdrData::ProgBits { name: Ok(".data"), addr: 0x229c00, align: 8,
                               data: SectionPos { offset: 0x26c00,
                                                  size: 0xe8 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::ProgBits { name: Ok(".got.plt"), addr: 0x229ce8, align: 8,
                               data: SectionPos { offset: 0x26ce8,
                                                  size: 0x410 },
                               alloc: true, write: true, exec: false },
    SectionHdrData::Nobits { name: Ok(".bss"), addr: 0x22a100, align: 32,
                             offset: 0x270f8, size: 0x13d8, alloc: true,
                             write: true, exec: false },
    SectionHdrData::ProgBits { name: Ok(".comment"), addr: 0, align: 1,
                               data: SectionPos { offset: 0x270f8,
                                                  size: 0xa76 },
                               alloc: false, write: false, exec: false },
    SectionHdrData::ProgBits { name: Ok(".gnu_debuglink"), addr: 0, align: 1,
                               data: SectionPos { offset: 0x27b6e,
                                                  size: 0x10 },
                               alloc: false, write: false, exec: false },
    SectionHdrData::Strtab { name: Ok(".shstrtab"), addr: 0, align: 1,
                             strs: SectionPos { offset: 0x27b7e,
                                                size: 0x10a } }
];

#[test]
fn test_SectionHdrs_from_bytes_just_right() {
    let section_hdr: Result<SectionHdrs<'_, LittleEndian, Elf64>,
                            SectionHdrsError> =
        SectionHdrs::try_from(&ELF64_SECTION_HDR[0..]);

    assert!(section_hdr.is_ok());
}

#[test]
fn test_SectionHdrs_from_bytes_too_small() {
    let section_hdr: Result<SectionHdrs<'_, LittleEndian, Elf64>,
                            SectionHdrsError> =
        SectionHdrs::try_from(&ELF64_SECTION_HDR[0 ..
                                                 ELF64_SECTION_HDR.len() - 1]);

    assert!(section_hdr.is_err());
}

#[test]
fn test_SectionHdrs_from_bytes_num_hdrs() {
    let section_hdr: SectionHdrs<'_, LittleEndian, Elf64> =
        SectionHdrs::try_from(&ELF64_SECTION_HDR[0..])
        .expect("Expected success");

    assert_eq!(section_hdr.num_hdrs(), ELF64_NUM_SECTION_HDRS);
}

#[test]
fn test_SectionHdrs_from_bytes_iter_len() {
    let section_hdr: SectionHdrs<'_, LittleEndian, Elf64> =
        SectionHdrs::try_from(&ELF64_SECTION_HDR[0..])
        .expect("Expected success");
    let iter = section_hdr.iter();

    assert_eq!(iter.len(), ELF64_NUM_SECTION_HDRS);
}

#[test]
fn test_SectionHdrs_from_bytes_just_right_mut() {
    let mut buf = ELF64_SECTION_HDR.clone();
    let section_hdr: Result<SectionHdrs<'_, LittleEndian, Elf64>,
                            SectionHdrsError> =
        SectionHdrs::try_from(&mut buf[0..]);

    assert!(section_hdr.is_ok());
}

#[test]
fn test_SectionHdrs_from_bytes_too_small_mut() {
    let mut buf = ELF64_SECTION_HDR.clone();
    let section_hdr: Result<SectionHdrs<'_, LittleEndian, Elf64>,
                            SectionHdrsError> =
        SectionHdrs::try_from(&mut buf[0 .. ELF64_SECTION_HDR.len() - 1]);

    assert!(section_hdr.is_err());
}

#[test]
fn test_SectionHdrs_from_bytes_num_hdrs_mut() {
    let mut buf = ELF64_SECTION_HDR.clone();
    let section_hdr: SectionHdrs<'_, LittleEndian, Elf64> =
        SectionHdrs::try_from(&mut buf[0..]).expect("Expected success");

    assert_eq!(section_hdr.num_hdrs(), ELF64_NUM_SECTION_HDRS);
}

#[test]
fn test_SectionHdrs_from_bytes_iter_len_mut() {
    let mut buf = ELF64_SECTION_HDR.clone();
    let section_hdr: SectionHdrs<'_, LittleEndian, Elf64> =
        SectionHdrs::try_from(&mut buf[0..]).expect("Expected success");
    let iter = section_hdr.iter();

    assert_eq!(iter.len(), ELF64_NUM_SECTION_HDRS);
}

#[test]
fn test_SectionHdrs_from_bytes_iter() {
    let section_hdr: SectionHdrs<'_, LittleEndian, Elf64> =
        SectionHdrs::try_from(&ELF64_SECTION_HDR[0..])
        .expect("Expected success");
    let mut iter = section_hdr.iter();

    for expect in ELF64_SECTION_HDR_CONTENTS_BARE.iter() {
        let ent = iter.next();

        assert!(ent.is_some());

        let data = ent.unwrap().try_into();

        assert!(data.is_ok());

        let actual = data.unwrap();

        assert_eq!(expect, &actual)
    }

    assert!(iter.next().is_none());
}

#[test]
fn test_SectionHdrs_from_bytes_idx() {
    let section_hdr: SectionHdrs<'_, LittleEndian, Elf64> =
        SectionHdrs::try_from(&ELF64_SECTION_HDR[0..])
        .expect("Expected success");
    let mut iter = section_hdr.iter();

    for i in 0 .. ELF64_SECTION_HDR_CONTENTS_BARE.len() {
        let expect = &ELF64_SECTION_HDR_CONTENTS_BARE[i];
        let ent = section_hdr.idx(i);

        assert!(ent.is_some());

        let data = ent.unwrap().try_into();

        assert!(data.is_ok());

        let actual = data.unwrap();

        assert_eq!(expect, &actual)
    }

    assert!(section_hdr.idx(ELF64_SECTION_HDR_CONTENTS_BARE.len()).is_none());
}

#[test]
fn test_SectionHdrs_with_strtab_iter() {
    let section_hdr: SectionHdrs<'_, LittleEndian, Elf64> =
        SectionHdrs::try_from(&ELF64_SECTION_HDR[0..])
        .expect("Expected success");
    let strtab: Strtab<'_> = Strtab::try_from(&ELF64_STRTAB[0..])
        .expect("Expected success");
    let mut iter = section_hdr.iter();

    for expect in ELF64_SECTION_HDR_CONTENTS_STRS.iter() {
        let ent = iter.next();

        assert!(ent.is_some());

        let data = ent.unwrap().try_into();

        assert!(data.is_ok());

        let raw: SectionHdrData<Elf64, u32, u32, u32, u32,
                                SectionPos<u64>, SectionPos<u64>,
                                SectionPos<u64>, SectionPos<u64>,
                                SectionPos<u64>, SectionPos<u64>,
                                SectionPos<u64>, SectionPos<u64>> =
            data.unwrap();
        let actual: SectionHdrData<Elf64, Result<&'static str, &'static [u8]>,
                                   u32, u32, u32,
                                   SectionPos<u64>, SectionPos<u64>,
                                   SectionPos<u64>, SectionPos<u64>,
                                   SectionPos<u64>, SectionPos<u64>,
                                   SectionPos<u64>, SectionPos<u64>> =
            raw.with_strtab(strtab).unwrap();

        assert_eq!(expect, &actual)
    }

    assert!(iter.next().is_none());
}

#[test]
fn test_SectionHdrs_with_strtab_idx() {
    let section_hdr: SectionHdrs<'_, LittleEndian, Elf64> =
        SectionHdrs::try_from(&ELF64_SECTION_HDR[0..])
        .expect("Expected success");
    let strtab: Strtab<'_> = Strtab::try_from(&ELF64_STRTAB[0..])
        .expect("Expected success");
    let mut iter = section_hdr.iter();

    for i in 0 .. ELF64_SECTION_HDR_CONTENTS_STRS.len() {
        let expect = &ELF64_SECTION_HDR_CONTENTS_STRS[i];
        let ent = section_hdr.idx(i);

        assert!(ent.is_some());

        let data = ent.unwrap().try_into();

        assert!(data.is_ok());

        let raw: SectionHdrData<Elf64, u32, u32, u32, u32,
                                SectionPos<u64>, SectionPos<u64>,
                                SectionPos<u64>, SectionPos<u64>,
                                SectionPos<u64>, SectionPos<u64>,
                                SectionPos<u64>, SectionPos<u64>> =
            data.unwrap();
        let actual: SectionHdrData<Elf64, Result<&'static str, &'static [u8]>,
                                   u32, u32, u32,
                                   SectionPos<u64>, SectionPos<u64>,
                                   SectionPos<u64>, SectionPos<u64>,
                                   SectionPos<u64>, SectionPos<u64>,
                                   SectionPos<u64>, SectionPos<u64>> =
            raw.with_strtab(strtab).unwrap();

        assert_eq!(expect, &actual)
    }

    assert!(section_hdr.idx(ELF64_SECTION_HDR_CONTENTS_BARE.len()).is_none());
}

#[test]
fn test_SectionHdrs_create_just_right() {
    let mut buf = [0; ELF64_SECTION_HDR_BYTES];
    let dynamic: Result<(SectionHdrs<'_, LittleEndian, Elf64>,
                         &'_ mut [u8]), ()> =
        SectionHdrs::create_split(&mut buf[0..],
                                  ELF64_SECTION_HDR_CONTENTS_BARE
                                  .iter().map(|x| *x));

    assert!(dynamic.is_ok());

    let (dynamic, buf) = dynamic.expect("Expected success");

    assert_eq!(buf.len(), 0);
}

#[test]
fn test_SectionHdrs_create_too_big() {
    let mut buf = [0; ELF64_SECTION_HDR_BYTES + 1];
    let dynamic: Result<(SectionHdrs<'_, LittleEndian, Elf64>,
                         &'_ mut [u8]), ()> =
        SectionHdrs::create_split(&mut buf[0..],
                                  ELF64_SECTION_HDR_CONTENTS_BARE
                                  .iter().map(|x| *x));

    assert!(dynamic.is_ok());

    let (dynamic, buf) = dynamic.expect("Expected success");

    assert_eq!(buf.len(), 1);
}

#[test]
fn test_SectionHdrs_create_too_small() {
    let mut buf = [0; ELF64_SECTION_HDR_BYTES - 1];
    let dynamic: Result<(SectionHdrs<'_, LittleEndian, Elf64>,
                         &'_ mut [u8]), ()> =
        SectionHdrs::create_split(&mut buf[0..],
                                  ELF64_SECTION_HDR_CONTENTS_BARE
                                  .iter().map(|x| *x));

    assert!(dynamic.is_err());
}


#[test]
fn test_SectionHdrs_create_iter() {
    let mut buf = [0; ELF64_SECTION_HDR_BYTES];
    let dynamic: Result<(SectionHdrs<'_, LittleEndian, Elf64>,
                         &'_ mut [u8]), ()> =
        SectionHdrs::create_split(&mut buf[0..],
                                  ELF64_SECTION_HDR_CONTENTS_BARE
                                  .iter().map(|x| *x));

    assert!(dynamic.is_ok());

    let (dynamic, buf) = dynamic.expect("Expected success");

    assert_eq!(buf.len(), 0);

    let mut iter = dynamic.iter();

    for expect in ELF64_SECTION_HDR_CONTENTS_BARE.iter() {
        let sym = iter.next();

        assert!(sym.is_some());

        let data = sym.unwrap().try_into();

        assert!(data.is_ok());

        let actual = data.unwrap();

        assert_eq!(expect, &actual)
    }

    assert!(iter.next().is_none());
}

#[test]
fn test_SectionHdrs_create_idx() {
    let mut buf = [0; ELF64_SECTION_HDR_BYTES];
    let dynamic: Result<(SectionHdrs<'_, LittleEndian, Elf64>,
                         &'_ mut [u8]), ()> =
        SectionHdrs::create_split(&mut buf[0..],
                                  ELF64_SECTION_HDR_CONTENTS_BARE
                                  .iter().map(|x| *x));

    assert!(dynamic.is_ok());

    let (dynamic, buf) = dynamic.expect("Expected success");

    assert_eq!(buf.len(), 0);

    for i in 0 .. ELF64_SECTION_HDR_CONTENTS_BARE.len() {
        let expect = &ELF64_SECTION_HDR_CONTENTS_BARE[i];
        let sym = dynamic.idx(i);

        assert!(sym.is_some());

        let data = sym.unwrap().try_into();

        assert!(data.is_ok());

        let actual = data.unwrap();

        assert_eq!(expect, &actual)
    }

    assert!(dynamic.idx(ELF64_SECTION_HDR_CONTENTS_BARE.len()).is_none());
}
