use byteorder::LittleEndian;
use core::convert::TryFrom;
use core::convert::TryInto;
use elf_utils::Elf64;
use elf_utils::reloc::RelaData;
use elf_utils::reloc::Relas;
use elf_utils::reloc::x86_64::X86_64Reloc;
use elf_utils::reloc::x86_64::X86_64RelocError;

const X86_64_RELAS_SIZE: usize = 600;

const X86_64_RELAS: [u8; X86_64_RELAS_SIZE] = [
    0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
    0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
    0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
    0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
    0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x7a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xdf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
    0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00,
    0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,
    0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x2a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x30, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
    0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x45, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x4a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x92, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xac, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
    0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xb1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xb7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x37, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x5e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00,
    0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x79, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
    0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
];

const X86_64_NUM_RELAS: usize = 25;

const X86_64_RELAS_CONTENTS: [X86_64Reloc<u32>; X86_64_NUM_RELAS] = [
    X86_64Reloc::PC32 { offset: 0x22, sym: 36, addend: -5 },
    X86_64Reloc::PC32 { offset: 0x2c, sym: 36, addend: -4 },
    X86_64Reloc::Abs32 { offset: 0x42, sym: 21, addend: 0 },
    X86_64Reloc::PLTRel { offset: 0x4f, sym: 35, addend: -4 },
    X86_64Reloc::PC32 { offset: 0x63, sym: 28, addend: -4 },
    X86_64Reloc::Abs32 { offset: 0x7a, sym: 29, addend: 0 },
    X86_64Reloc::Abs32 { offset: 0x80, sym: 30, addend: 0 },
    X86_64Reloc::Abs32 { offset: 0xca, sym: 29, addend: 0 },
    X86_64Reloc::PLTRel { offset: 0xdf, sym: 33, addend: -4 },
    X86_64Reloc::PLTRel { offset: 0xfb, sym: 38, addend: -4 },
    X86_64Reloc::PLTRel { offset: 0x102, sym: 37, addend: -4 },
    X86_64Reloc::Abs32 { offset: 0x12a, sym: 21, addend: 0 },
    X86_64Reloc::Abs32 { offset: 0x13b, sym: 4, addend: 560 },
    X86_64Reloc::PLTRel { offset: 0x140, sym: 35, addend: -4 },
    X86_64Reloc::Abs32 { offset: 0x145, sym: 27, addend: 0 },
    X86_64Reloc::Abs32 { offset: 0x14a, sym: 26, addend: 0 },
    X86_64Reloc::Abs32Signed { offset: 0x192, sym: 27, addend: 0 },
    X86_64Reloc::PLTRel { offset: 0x1ac, sym: 32, addend: -4 },
    X86_64Reloc::Abs32{ offset: 0x1b1, sym: 25, addend: 0 },
    X86_64Reloc::Abs32 { offset: 0x1b7, sym: 24, addend: 0 },
    X86_64Reloc::Abs32Signed { offset: 0x202, sym: 25, addend: 0 },
    X86_64Reloc::Abs32 { offset: 0x237, sym: 23, addend: 0 },
    X86_64Reloc::Abs32 { offset: 0x23c, sym: 22, addend: 0 },
    X86_64Reloc::PLTRel { offset: 0x25e, sym: 31, addend: -4 },
    X86_64Reloc::Abs32Signed { offset: 0x279, sym: 23, addend: -8 }
];

#[test]
fn test_Relas_from_bytes_iter() {
    let rels: Relas<'_, LittleEndian, Elf64> =
        Relas::try_from(&X86_64_RELAS[0..]).expect("Expected success");
    let mut iter = rels.iter();

    for expect in X86_64_RELAS_CONTENTS.iter() {
        let rel = iter.next();

        assert!(rel.is_some());

        let raw: RelaData<u32, Elf64> = rel.unwrap().into();
        let data: Result<X86_64Reloc<u32>, X86_64RelocError> = raw.try_into();

        assert!(data.is_ok());

        let actual = data.unwrap();

        assert_eq!(expect, &actual)
    }

    assert!(iter.next().is_none());
}

#[test]
fn test_Relas_from_bytes_idx() {
    let rels: Relas<'_, LittleEndian, Elf64> =
        Relas::try_from(&X86_64_RELAS[0..]).expect("Expected success");
    let mut iter = rels.iter();

    for i in 0 .. X86_64_NUM_RELAS {
        let expect = &X86_64_RELAS_CONTENTS[i];
        let rel = rels.idx(i);

        assert!(rel.is_some());

        let raw: RelaData<u32, Elf64> = rel.unwrap().into();
        let data: Result<X86_64Reloc<u32>, X86_64RelocError> = raw.try_into();

        assert!(data.is_ok());

        let actual = data.unwrap();

        assert_eq!(expect, &actual)
    }

    assert!(rels.idx(X86_64_RELAS_CONTENTS.len()).is_none());
}
